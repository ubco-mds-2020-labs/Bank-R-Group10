app$layout(
dbcContainer(
list(
dccGraph(id = "boxplot"),
dccDropdown(
id = "ycol",
options = list(list(label = "Yes", value = "yes"),
list(label = "No", value = "no")),
value = 'yes'
),
dccDropdown(
id = 'numerical_col',
options = df_n %>%
colnames %>%
purrr::map(function(col) list(label = col, value = col)),
value = 'Age'
)
)
)
)
app$callback(
output('boxplot','figure'),
list(input('ycol','value'),
input('numerical_col','value')),
function(numerical_col,ycol){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==ycol)
p <- ggplot(select_df) +
aes(x = Predicted.Subscription.for.Current.Campaign,
y = numerical_col) +
geom_boxplot()
ggplotly(p)
}
)
app$run_server(debug = T)
function(numerical_col,ycol){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==ycol)
p <- ggplot(select_df) +
aes(x = Predicted.Subscription.for.Current.Campaign,
y = numerical_col) +
geom_boxplot()
ggplotly(p)
}
function(Age,yes){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==ycol)
p <- ggplot(select_df) +
aes(x = Predicted.Subscription.for.Current.Campaign,
y = numerical_col) +
geom_boxplot()
ggplotly(p)
}
app$layout(
dbcContainer(
list(
dccGraph(id = "boxplot"),
dccDropdown(
id = "ycol",
options = list(list(label = "Yes", value = "yes"),
list(label = "No", value = "no")),
value = 'yes'
),
dccDropdown(
id = 'numerical_col',
options = df_n %>%
colnames %>%
purrr::map(function(col) list(label = col, value = col)),
value = 'Age'
)
)
)
)
app$callback(
output('boxplot','figure'),
list(input('ycol','value'),
input('numerical_col','value')),
function(numerical_col,ycol){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==ycol)
p <- ggplot(select_df) +
aes(x = Predicted.Subscription.for.Current.Campaign,
y = numerical_col) +
geom_boxplot()
ggplotly(p)
}
)
app$run_server(debug = T)
app$layout(
dbcContainer(
list(
dccGraph(id = "boxplot"),
dccDropdown(
id = "ycol",
options = list(list(label = "Yes", value = "yes"),
list(label = "No", value = "no")),
value = 'yes'
),
dccDropdown(
id = 'numerical_col',
options = df_n %>%
colnames %>%
purrr::map(function(col) list(label = col, value = col)),
value = 'Age'
)
)
)
)
app$callback(
output('boxplot','figure'),
list(input('ycol','value')),
#input('numerical_col','value')),
function(ycol){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==ycol)
p <- ggplot(select_df) +
aes(x = Predicted.Subscription.for.Current.Campaign,
y = Age) +
geom_boxplot()
ggplotly(p)
}
)
app$run_server(debug = T)
app$callback(
output('boxplot','figure'),
list(input('ycol','value'),
input('numerical_col','value')),
function(ycol){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==ycol)
p <- ggplot(select_df) +
aes(x = Predicted.Subscription.for.Current.Campaign,
y = Age) +
geom_boxplot()
ggplotly(p)
}
)
app$run_server(debug = T)
app$callback(
output('boxplot','figure'),
list(input('ycol','value')),
#input('numerical_col','value')),
function(ycol){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==ycol)
p <- ggplot(select_df) +
aes(x = Predicted.Subscription.for.Current.Campaign,
y = Age) +
geom_boxplot()
ggplotly(p)
}
)
app$run_server(debug = T)
ggplot(df) +
aes(x = Predicted.Subscription.for.Current.Campaign,
y = count(Type.of.Job)) +
geom_lineplot()
ggplot(df) +
aes(x = Predicted.Subscription.for.Current.Campaign,
y = count(Type.of.Job)) +
geom_linep()
ggplot(df) +
aes(x = Predicted.Subscription.for.Current.Campaign,
y = count(Type.of.Job)) +
geom_line()
ggplot(select_df) +
aes(x = Predicted.Subscription.for.Current.Campaign) +
geom_line(aes(fill=..count..), stat="Type.of.Job")
ggplot(df) +
aes(x = Predicted.Subscription.for.Current.Campaign) +
geom_line(aes(fill=..count..), stat="Type.of.Job")
ggplot(df) +
aes(x = Type.of.Job) +
geom_line(aes(fill=..count..), stat="bin")
ggplot(df) +
aes(x = Type.of.Job) +
geom_line(aes(fill=..count..))
ggplot(df) +
aes(x = count(Type.of.Job),
y = Predicted.Subscription.for.Current.Campaig) +
geom_line()
count(Type.of.Job)
count(df$Type.of.Job)
select_df%>% group_by(Type.of.Job)
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==ycol)
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign=="yes")
select_df%>% group_by(Type.of.Job)
select_df%>% group_by(Type.of.Job)%>% tally
ggplot(count_df) +
aes(x = Type.of.Job,
y = n) +
geom_line()
count_df <- select_df%>% group_by(Type.of.Job)%>% tally
ggplot(count_df) +
aes(x = Type.of.Job,
y = n) +
geom_line()
count_Df
count_df
ggplot(count_df,
aes(x = Type.of.Job,
y = n)) +
geom_line()
ggplot(count_df,
aes(x = Type.of.Job,
y = n)) +
geom_point()
ggplot(count_df,
aes(x = Type.of.Job,
y = n)) +
geom_point()+
geom_line()
ggplot(count_df,
aes(x = Type.of.Job,
y = n)) +
geom_point()+
geom_line(group=1)
app$callback(
output('boxplot','figure'),
list(input('ycol','value')),
#input('numerical_col','value')),
function(ycol){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==ycol)
p <- ggplot(select_df) +
aes(x = Predicted.Subscription.for.Current.Campaign,
y = Age) +
geom_boxplot()
ggplotly(p)
},
output('lineplot','figure'),
list(input('ycol','value')),
function(ycol){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==ycol)
count_df <- select_df%>% group_by(Type.of.Job)%>% tally
p <- ggplot(count_df,
aes(x = Type.of.Job,
y = n)) +
geom_point()+
geom_line(group=1)
ggplotly(p)
}
)
app$layout(
dbcContainer(
list(
dccGraph(id = "boxplot"),
dccGraph(id = "lineplot"),
dccDropdown(
id = "ycol",
options = list(list(label = "Yes", value = "yes"),
list(label = "No", value = "no")),
value = 'yes'
),
dccDropdown(
id = 'numerical_col',
options = df_n %>%
colnames %>%
purrr::map(function(col) list(label = col, value = col)),
value = 'Age'
)
)
)
)
app$callback(
output('boxplot','figure'),
list(input('ycol','value')),
#input('numerical_col','value')),
function(ycol){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==ycol)
p <- ggplot(select_df) +
aes(x = Predicted.Subscription.for.Current.Campaign,
y = Age) +
geom_boxplot()
ggplotly(p)
},
output('lineplot','figure'),
list(input('ycol','value')),
function(ycol){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==ycol)
count_df <- select_df%>% group_by(Type.of.Job)%>% tally
p <- ggplot(count_df,
aes(x = Type.of.Job,
y = n)) +
geom_point()+
geom_line(group=1)
ggplotly(p)
}
)
app$callback(
output('lineplot','figure'),
list(input('ycol','value')),
function(ycol){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==ycol)
count_df <- select_df%>% group_by(Type.of.Job)%>% tally
p <- ggplot(count_df,
aes(x = Type.of.Job,
y = n)) +
geom_point()+
geom_line(group=1)
ggplotly(p)
}
)
app$callback(
output('boxplot','figure'),
list(input('ycol','value')),
#input('numerical_col','value')),
function(ycol){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==ycol)
p <- ggplot(select_df) +
aes(x = Predicted.Subscription.for.Current.Campaign,
y = Age) +
geom_boxplot()
ggplotly(p)
})
a
app$run_server(debug = T)
app$callback(
output('boxplot','figure'),
list(input('ycol','value'),
input('numerical_col','value')),
function(numerical_col,ycol){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==ycol)
p <- ggplot(select_df,
aes(x = Predicted.Subscription.for.Current.Campaign,
y = numerical_col)) +
geom_boxplot()
ggplotly(p)
})
app$callback(
output('lineplot','figure'),
list(input('ycol','value')),
function(ycol){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==ycol)
count_df <- select_df%>% group_by(Type.of.Job)%>% tally
p <- ggplot(count_df,
aes(x = Type.of.Job,
y = n)) +
geom_point()+
geom_line(group=1)
ggplotly(p)
}
)
app$run_server(debug = T)
app$callback(
output('boxplot','figure'),
list(input('ycol','value'),
input('numerical_col','value')),
function(numerical_col,ycol){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==!!sym(ycol))
p <- ggplot(select_df,
aes(x = Predicted.Subscription.for.Current.Campaign,
y = !!sym(numerical_col))) +
geom_boxplot()
ggplotly(p)
})
app$callback(
output('lineplot','figure'),
list(input('ycol','value')),
function(ycol){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==ycol)
count_df <- select_df%>% group_by(Type.of.Job)%>% tally
p <- ggplot(count_df,
aes(x = Type.of.Job,
y = n)) +
geom_point()+
geom_line(group=1)
ggplotly(p)
}
)
app$callback(
output('boxplot','figure'),
list(input('ycol','value'),
input('numerical_col','value')),
function(numerical_col,ycol){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==!!sym(ycol))
p <- ggplot(select_df,
aes(x = Predicted.Subscription.for.Current.Campaign,
y = !!sym(numerical_col))) +
geom_boxplot()
ggplotly(p)
})
app$callback(
output('lineplot','figure'),
list(input('ycol','value')),
function(ycol){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==ycol)
count_df <- select_df%>% group_by(Type.of.Job)%>% tally
p <- ggplot(count_df,
aes(x = Type.of.Job,
y = n)) +
geom_point()+
geom_line(group=1)
ggplotly(p)
}
)
app$run_server(debug = T)
app$callback(
output('boxplot','figure'),
list(#input('ycol','value'),
input('numerical_col','value')),
function(numerical_col){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign=="yes")
p <- ggplot(select_df,
aes(x = Predicted.Subscription.for.Current.Campaign,
y = numerical_col)) +
geom_boxplot()
ggplotly(p)
})
app$callback(
output('lineplot','figure'),
list(input('ycol','value')),
function(ycol){
select_df <- df %>% filter(Predicted.Subscription.for.Current.Campaign==ycol)
count_df <- select_df%>% group_by(Type.of.Job)%>% tally
p <- ggplot(count_df,
aes(x = Type.of.Job,
y = n)) +
geom_point()+
geom_line(group=1)
ggplotly(p)
}
)
app$run_server(debug = T)
#Part1
#2
x <- 1:6
y <- c(3.5, 4.7, 5.8, 4.9, 4.5, 4.6)
h <- 1.05
x0 <- 3.7
g0.lm <- lm(y  ~ 1, weights = dnorm(x - x0, sd = h))
coef(g0.lm) # estimate of g(x0)
g0.lm <- lm(y  ~ I(x - x0), weights = dnorm(x - x0, sd = h))
coef(g0.lm)[1]
#local quadratic
g0.lm <- lm(y  ~ I(x - x0) + I((x-x0)ˆ2), weights = dnorm(x - x0, sd = h))
coef(g0.lm)[1]
#local quadratic
g0.lm <- lm(y  ~ I(x - x0) + I((x-x0)ˆ2), weights = dnorm(x - x0, sd = h))
#local quadratic
g1.lm <- lm(y  ~ I(x - x0) + I((x-x0)ˆ2), weights = dnorm(x - x0, sd = h))
coef(g1.lm)[1]
#local quadratic
g0.lm <- lm(y  ~ I(x - x0) + I((x-x0)^2), weights = dnorm(x - x0, sd = h))
coef(g0.lm)[1]
# local constant
x0 <- seq(1.25, 5.75, 0.25) m <- length(x0)
y0 <- numeric(m)
# local constant
x0 <- seq(1.25, 5.75, 0.25)
m <- length(x0)
y0 <- numeric(m)
for (i in 1:m) {
g0.lm <- lm(y  ~ 1, weights = dnorm(x - x0[i], sd = h))
y0[i] <- coef(g0.lm) # estimate of g(x0)
}
# local linear
m <- length(x0) y1 <- numeric(m) for (i in 1:m) {
g0.lm <- lm(y  ~ I(x - x0[i]),
weights = dnorm(x - x0[i], sd = h))
y1[i] <- coef(g0.lm)[1] # local linear estimate of g(x0)
}
# local linear
m <- length(x0)
y1 <- numeric(m) for (i in 1:m) {
g0.lm <- lm(y  ~ I(x - x0[i]),
weights = dnorm(x - x0[i], sd = h))
y1[i] <- coef(g0.lm)[1] # local linear estimate of g(x0)
}
y1 <- numeric(m)
for (i in 1:m) {
g0.lm <- lm(y  ~ I(x - x0[i]),
weights = dnorm(x - x0[i], sd = h))
y1[i] <- coef(g0.lm)[1] # local linear estimate of g(x0)
}
# local quadratic
m <- length(x0)
y2 <- numeric(m)
for (i in 1:m) {
g0.lm <- lm(y  ~ I(x - x0[i]) + I((x-x0[i])^2), weights = dnorm(x - x0[i], sd = h))
y2[i] <- coef(g0.lm)[1] # local quadratic estimate of g(x0)
}
plot(x, y)
lines(x0, y0)
lines(x0, y1, col=2)
lines(x0, y2, col=3)
#4
library(DAAG)
x <- ironslag$magnetic
y <- ironslag$chemical
library(KernSmooth)
h <- dpill(x, y)
faithful.l0 <- locpoly(x, y, degree = 0, bandwidth = h)
faithful.l1 <- locpoly(x, y, degree = 1, bandwidth = h)
faithful.l2 <- locpoly(x, y, degree = 2, bandwidth = h)
plot(x, y, col="grey")
lines(faithful.l0)
lines(faithful.l1, col=2, lty=2)
lines(faithful.l2, col=3)
#6
set.seed(36360)
g <- function(x) exp(sin(6x))
g <- function(x) exp(sin(6*x))
n <- 50; sigma = 0.25
x <- runif(n,max=1)
y <- g(x) + rnorm(n, sd = sigma)
h <- 0.1
sim.l0 <- locpoly(x, y, degree = 0, bandwidth = h)
sim.l1 <- locpoly(x, y, degree = 1, bandwidth = h)
sim.l2 <- locpoly(x, y, degree = 2, bandwidth = h)
plot(x, y)
h <- 0.1
lines(sim.l0)
lines(sim.l1, col=2, lty=2)
lines(sim.l2, col=3)
curve(g(x), 0, 2, add = TRUE, col = 4)
#Part3
#1
par(mar=c(4,4,1,1))
plot(distance~thickness,data=geophones)
